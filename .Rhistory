str(ToothGrowth)
tg<-subset(ToothGrowth, dose!=1)
str(tg)
t.test(len ~ dose)$conf
t.test(len ~ dose, data=tg)$conf
t.test(len ~ dose, data=tg, paired=FALSE, var.equal=FALSE)
tg[dose=.5]<-"Low"
tg[tg$dose=.5]
tg[tg$dose==.5]
tg[tg$dose==.5,]
tg$dose[tg$dose==.5,]<-"Low"
tg[tg$dose==.5,]
tg$doselevel
for i in 1:len(tg) {if tg$dose=.5, tg$doselevel="Low", else tg$doselevel="High"}
len(tg)
length(tg)
nrow(tg)
for i in 1:nrow(tg) {if tg$dose=.5, tg$doselevel="Low", else tg$doselevel="High"}
for i in 1:nrow(tg) {if tg$dose[i,]=.5, tg$doselevel[i,]="Low", else tg$doselevel[i,]="High"}
for (i in 1:nrow(tg)) {if tg$dose[i,]=.5, tg$doselevel[i,]="Low", else tg$doselevel[i,]="High"}
tg$doselevel=factor("Low","High")
head(tg)
str(tg)
?factor
tg$doselevel=factor(c("Low","High"))
str(tg)
apply(if (tg$dose==.5) tg$doselevel="High")
tg$doselevel[tg$dose=.5]<-"High"
tg$doselevel[tg$dose==.5]<-"High"
tg$doselevel[tg$dose!=.5]<-"High"
tg$doselevel[tg$dose==.5]<-"Low"
head(tg)
t.test(len ~ dose, data=tg, paired=FALSE, var.equal=FALSE)
t.test(len ~ doselevel, data=tg, paired=FALSE, var.equal=FALSE)
ToothGrowth$doselevel=factor(c("Low","Med","High"))
ToothGrowth$doselevel[ToothGrowth$dose==.5]<-"Low"
ToothGrowth$doselevel[ToothGrowth$dose==1.0]<-"Med"
ToothGrowth$doselevel[ToothGrowth$dose==2.0]<-"High"
ToothGrowth
t.test(len ~ doselevel, data=ToothGrowth, paired=FALSE, var.equal=FALSE)
tg<-subset(ToothGrowth, doselevel!="Med")
t.test(len ~ doselevel, data=tg, paired=FALSE, var.equal=FALSE)
tg<-subset(ToothGrowth, doselevel!="Low")
t.test(len ~ doselevel, data=tg, paired=FALSE, var.equal=FALSE)
tg<-subset(ToothGrowth, doselevel!="High")
t.test(len ~ doselevel, data=tg, paired=FALSE, var.equal=FALSE)
tg_high<-subset(ToothGrowth, doselevel!="High")
t.test(len ~ supp, data=tg_high, paired=FALSE, var.equal=FALSE)
tg_high<-subset(ToothGrowth, doselevel=="High")
t.test(len ~ supp, data=tg_high, paired=FALSE, var.equal=FALSE)
tg_med<-subset(ToothGrowth, doselevel=="Med")
t.test(len ~ supp, data=tg_med, paired=FALSE, var.equal=FALSE)
tg_low<-subset(ToothGrowth, doselevel=="Low")
t.test(len ~ supp, data=tg_low, paired=FALSE, var.equal=FALSE)
mu0 = 30
mua = 32
sigma = 4
n = 16
z = qnorm(1 - alpha)
alpha = 0.05
mu0 = 30
mua = 32
sigma = 4
n = 16
z = qnorm(1 - alpha)
pnorm(mu0 + z * sigma/sqrt(n), mean = mu0, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
library(ggplot2)
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
power.t.test(n = 16, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, power=.8, sd = 4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, power=.8, sd = 4, type = "one.sample", alt = "one.sided")$delta
##Bootstrapping example with real data
library(UsingR)
data(father.son)
x <- father.son$sheight
n <- length(x)
b<-10000
resamples<-matrix(sample(x, n*b, replace=TRUE), b, n)
resampledMedians <- apply(resamples, 1, median)
hist(resampledMedians, freq=FALSE)
hist(resampledMedians, freq=FALSE, breaks=1000)
hist(resampledMedians, freq=FALSE, breaks=100)
median(x)
sd(resampledMedians)
quantile(resampledMedians, c(.025, .975))
g=ggplot(data.frame(resampledMedians=resampledMedians), aes(x=resampledMedians))
g=g+ geom_histogram(color="black", fill="lightblue", binwidth=0.05)
g
data(InsectSprays)
boxplot(count ~ spray, data = InsectSprays)
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C"), ] ## just use "B" and "C"
y <- subdata$count
group <- as.character(subdata$spray)
##Test Statistic is the difference in means of groups
testStat <- function(w, g) mean(w[g == "B"]) - mean(w[g == "C"])
observedStat <- testStat(y, group)
##The null hypothesis is that the labels don't matter.  So simply run function testStat
##randomly assigning groups.  Will wind up with an array of 10000 testStats
permutations <- sapply(1:10000, function(i) testStat(y, sample(group)))
observedStat
mean(permutations > observedStat)  ##mean of (Logical vector with zeros and ones)
sum(permutations > observedStat)  ##mean of (Logical vector with zeros and ones)
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference<-g2-g1
mean(difference)
s<-sd(difference)
mn + c(-1,1)*qt(.975,9)*s/3
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
sp<-7*15.34^2+20*18.23^2
ns<-8+21-2
sp<-sqrt(sp/ns)
(132.86-127.44)+c(-1,1)*qt(.975,ns)*sp*(sqrt(1/9+1/21))
(132.86-127.44)+c(-1,1)*qt(.975,ns)*sp*(sqrt(1/8+1/21))
(132.86-127.44)+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
var(g1, g2)
sp<-sqrt((9*var(g1)+9*var(g2))/18)
md+c(-1,1)*sp*sqrt(1/10+1/10)
md+c(-1,1)*qt(.975,18)*sp*sqrt(1/10+1/10)
t.test(g2-g1, paired=FALSE, var.equal=TRUE)
t.test(g2-g1, paired=FALSE, var.equal=TRUE)$conf
t.test(g2,g1, paired=FALSE, var.equal=TRUE)$conf
t.test(g2,g1, paired=TRUE, var.equal=TRUE)$conf
t.test(g2,g1, paired=TRUE)$conf
num<-(15.3^2/8+18.23^/21)^2
num<-(15.3^2/8+18.23^2/21)^2
num<-(15.34^2/8+18.23^2/21)^2
den<-15.34^4/8^2/7+18.23^4/21^2/20
mydf<-num/den
132.86-127.44+c(-1,1)*qt(.975, mydf)*sqrt(15.34^2/8+18.23^2/21)
1
2
2/(10/4)
15
qt(.95,15)
dim(fs)
t.test(fs$fheight-fs$sheight)
11.7885*sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
pt(q=2.5, df=15, lower.tail=FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2, lower.tail=FALSE)
mybin
pbinom(6, size=8, prob=.5, lower.tail=FALSE)
pbinom(7, size=8, prob=.5, lower.tail=TRUE)
ppois(9, lambda=5, lower.tail=FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z<-qnorm(.95)
pnorm(q=30+z, mean=30, lower.tail=FALSE)
pnorm(q=30+z, mean=32, lower.tail=FALSE)
pnorm(q=30+z, mean=32, sd=1, lower.tail=FALSE)
pnorm(q=30+z, mean=32, sd=2, lower.tail=FALSE)
pnorm(q=30+z*2, mean=32, sd=2, lower.tail=FALSE)
power.t.test(n=16, delta=2/4, sd=1, type="one.sample", alt="one.sided")$power
power.t.test(n=16, delta=2, sd=4, type="one.sample", alt="one.sided")$power
power.t.test(n=16, delta=100, sd=200, type="one.sample", alt="one.sided")$power
power.t.test(power=.8, delta=2/4, sd=1, type = "one.sample", alt="one.sided")$n
power.t.test(power=.8, delta=2, sd=4, type = "one.sample", alt="one.sided")$n
power.t.test(power=.8, delta=100, sd=200, type = "one.sample", alt="one.sided")$n
power.t.test(power=.8, n=26, sd=1, type="one.sample", alt="one.sided")$delta
power.t.test(power=.8, n=27, sd=1, type="one.sample", alt="one.sided")$delta
head(pValues)
sum(pValues<.05)
sum(p.adjust(pValues<.05, method="bonferroni"))
sum(p.adjust(pValues, method="bonferroni")<0.05)
sum(p.adjust(pValues, method="BH")<0.05)
tail(trueStatus)
table(pValues2<.05, trueStatus)
24/500
table(p.adjust(pValues2, method="bonferroni")<.05, trueStatus)
table(p.adjust(pValues2, method="BH")<.05, trueStatus)
1/6+2/6+3/6+4/6+5/6+6/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam<-sample(fh, nh*B, replace=TRUE)
resam<-matrix(sam, B, nh)
meds<-apply(resam, 1, median)
median(fh)
median(meds)-median(fh)
sd(meds)
sd(resampledMedians)/sqrt(1000)
sd(resampledMedians)
quartile(resampledMedians, c(.025,.975))
quantile(resampledMedians, c(.025,.975))
quantile(meds, c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs<-testStat(BCcounts, group)
obs
mean(Bdata$count-Cdata$count)
sample(group)
perms< sapply(1:10000, function(i) testStat(BCcounts,sample(group)))
perms<- sapply(1:10000, function(i) testStat(BCcounts,sample(group)))
mean(perms>obs)
testStat(DEcounts, group)
perms<- sapply(1:10000, function(i) testStat(DEcounts,sample(group)))
Subjects<-c(1,2,3,4,5)
Baseline<-c(140,138,150,148,135)
TwoWeek<-c(132,135,151,146,130)
t.test(Baseline, TwoWeek, paired=TRUE)
qt(.975,8)
1100+ c(-1,1)*30*qt(.975,8)
1100+ c(-1,1)*30*qt(.975,8)/3
pbinom(2, size = 4, prob = 0.5, lower.tail = FALSE)
ppois(5.6, 10, lower.tail = TRUE)
ppois(6, 10, lower.tail = TRUE)
ppois(5, 10, lower.tail = TRUE)
ppois(10, 18, lower.tail = TRUE)
ppois(10, 17.87, lower.tail = TRUE)
8*(1.5^2+1.8^2)
43.92/16
sqrt(2.745)
4/1.656
qt(.975,16)
qt(.99,16)
qt(.95,8)
23/1.859548
qt(.975,8)
power.t.test(n = 100, delta = .01, sd = .04, type = "one.sample", alt = "one.sided")$power
power.t.test(power=.9, delta = .01, sd = .04, type = "one.sample", alt = "one.sided")$power
power.t.test(power=.9, delta = .01, sd = .04, type = "one.sample", alt = "one.sided")$n
sp <- sqrt((8 * 1.5^2 + 8 * 1.8^2) / (9 + 9 - 2))
sp
4 + c(-1, 1) * qt(.975, 16) * sp * (1 / 9 + 1 / 9)^.5
4 + c(-1, 1) * qt(.995, 16) * sp * (1 / 9 + 1 / 9)^.5
4 + c(-1, 1) * qt(.9995, 16) * sp * (1 / 9 + 1 / 9)^.5
4 + c(-1, 1) * qt(.999995, 16) * sp * (1 / 9 + 1 / 9)^.5
qt(.95,8)
69/qt(.95,8)
install.packages("xtable")
library(swirl)
swirl()
fit<-lm(child~parent, data=galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var(est(ols.slope,ols.ic))
all.equal(varChild,varRes+varEst)
efit<- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor<-lm(gch_nor~gpa_nor)
fit<-lm(child~parent, data=galton)
sqrt(sum(fit$residuals)^2/(n-2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sTot<-sum((galton$child-mu)^2)
sRes<-sum((galton$child-fit$child)^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
(cor(child, parent, data=galton)^2)
(cor(galton$child, galton$parent)^2)
cor(galton$child, galton$parent)^2
data(diamond)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(lm(price ~ carat, data = diamond), lwd = 2)
data(diamond)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(lm(price ~ carat, data = diamond), lwd = 2)
library(UsingR)
data(diamond)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(lm(price ~ carat, data = diamond), lwd = 2)
fit <- lm(price~carat, data=diamond)
fit$coef
coef(fit)
fit <- lm(price~I(carat-mean(carat)), data=diamond)
coef(fit)
newx <- c(0.16, 0.27, 0.34)
coef(fit)[1] + coef(fit)[2] * newx
predict(fit, newdata = data.frame(carat = newx))
fit <- lm(price~carat, data=diamond)
newx <- c(0.16, 0.27, 0.34)
coef(fit)[1] + coef(fit)[2] * newx
predict(fit, newdata = data.frame(carat = newx))
head(fit$resid)
sum(fit$resid)
source('~/.active-rstudio-document')
fibo(4)
fibo(1)
fibo(2)
fibo(3)
fibo(5)
fibo(6)
fibo(10)
fibo(7)
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
-
-
fit<-lm(y~x)
summary(fit)$coefficients
fit<-lm(y~x)
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2])/10
##With 95% confidence, we estimate that a 0.1 carat increase in diamond size results in a 355.6 to 388.6
n <- 100; x <- rnorm(n); x2 <- rnorm(n); x3 <- rnorm(n)
y <- x + x2 + x3 + rnorm(n, sd = .1)
e <- function(a, b) a - sum( a * b ) / sum( b ^ 2) * b
ey <- e(e(y, x2), e(x3, x2))
ex <- e(e(x, x2), e(x3, x2))
sum(ey * ex) / sum(ex ^ 2)
coef(lm(y ~ x + x2 + x3 - 1)) #the -1 removes the intercept term
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
summary(lm(y~x))
data(mtcars)
str(mtcars)
fit<-lm(mpg~wt, data=mtcars)
summary(fit)
sumCoef <- summary(fit)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
predict(fit, 3, interval=("prediction"))
est_3k <- sumCoef[1,1]+sumCoef[2,1]*3
sswt <- sum((wt - mean(wt))^2)
sswt <- sum((mtcars$wt - mean(mtcars$wt))^2)
sigma<-sumCoef[2,2]*sqrt(sswt)
sepredict<-sigma * sqrt(1 + 1 / n + (mtcars$wt - mean(mtcars$wt))^2/sswt)
n<-len(mtcars$wt)
n<-length(mtcars$wt)
sepredict<-sigma * sqrt(1 + 1 / n + (mtcars$wt - mean(mtcars$wt))^2/sswt)
sepredict<-sigma * sqrt(1 + 1 / n + (3 - mean(mtcars$wt))^2/sswt)
est_3k+c(-1,1)*qt(.975, df=fit$df)*sepredict
summary(fit)
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2])*2
fit2<-lm(mpg~wt, data=mtcars, -1)
summary(fit2)
fit2<-lm(mpg~wt-1, data=mtcars)
summary(fit2)
fit$resid
sum(fit$resid^2)/sum(fit2$resid^2)
sum(fit$resid^2)
sum(fit2$resid^2)
head(fit2$resid)
head(fit$resid)
summary(fit)
lm(mpg~mean(mpg))
lm(mpg~mean(mpg), data=mtcars)
mtcars$noslope<-mean(mpg)
mtcars$noslope<-mean(mtcars$mpg)
head(mtcars$noslope)
lm(mpg~noslope, data=mtcars)
fit2<-lm(mpg~noslope, data=mtcars)
summary(fit2)
sum(fit2$resid^2)
sum(fit$resid^2)
sum(fit$resid^2)/sum(fit2$resid^2)
sum(fit$resid)
sum(fit2$resid)
fit3<-lm(mpg~wt-1, data=mtcars)
sum(fit3$resid)
mnwt<-mean(mtcars$wt)
predict(fit, newdata = data.frame(wt = mnwt))
p2<-predict(fit, newdata = data.frame(wt = mnwt))
summary(p2)
str(p2)
summary(fit)
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
mean(mtcars$mpg)
mean(mtcars$mpg)+sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
mean(mtcars$mpg)+sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * fit$rse
str(fit)
summary(fit)
mean(mtcars$mpg)+sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * 3.046
mean(mtcars$mpg)+(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * 3.046)
mean(mtcars$mpg)
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * 3.046)
mean(mtcars$mpg)+ c(-1, 1) * qt(.975, df = fit$df) * 3.046
mean(mtcars$mpg)+ c(-1, 1) * qt(.975, df = fit$df) * 3.046/sqrt(length(mtcars$mpg))
getwd()
setwd("C:/Users/DLeddy/Documents/GitHub/RepData_PeerAssessment1")
getwd()
dir
dir(.)
dir(..)
dir()
dir(./activity)
dir("./activity")
read.csv("./activity/activity.csv")
activity_df<-read.csv("./activity/activity.csv")
str(activity_df)
tail(actity_df)
tail(activity_df)
activity_df<-read.csv("./activity/activity.csv",colClasses=c("integer","date","integer"))
activity_df<-read.csv("./activity/activity.csv",colClasses=c("integer","character","integer"))
tail(activity_df)
activity_df$date<-as.date(activity_df$date)
activity_df$date<-as.Date(activity_df$date, "%Y-%m-%d")
tail(activity_df)
str(activity_df)
activity_df$date<-as.POSIXlt(activity_df$date)
activity_df$date$sec
weekday(activity_df$date)
wday(activity_df$date)
weekdays(activity_df$date)
setwd("C:/Users/DLeddy/Documents/GitHub/RepData_PeerAssessment1")
activity_df<-read.csv("./activity/activity.csv",colClasses=c("integer","character","integer"))
activity_df$date<-as.POSIXlt(activity_df$date, "%Y-%m-%d")
warnings()
head(activity_df)
weekdays(activiy$df[1:10])
weekdays(activiy_df$date[1:10])
weekdays(activity_df$date[1:10])
library(dplyr)
library(ggplot2)
activity_by_day<- groupby(activity_df, date)
activity_by_day<- group_by(activity_df, date)
activity_df<-read.csv("./activity/activity.csv",colClasses=c("integer","character","integer"))
activity_df$date<-as.Date(activity_df$date, "%Y-%m-%d")
activity_by_day<- group_by(activity_df, date)
names()
str(activity_by_day)
summarize(activity_by_day, totsteps=sum(steps, na.rm=TRUE))
steps_by_day<-summarize(activity_by_day, daily_steps=sum(steps, na.rm=TRUE))
hist(steps_by_day$totsteps)
str(steps_by_day)
hist(steps_by_day$daily_steps)
hist(steps_by_day$daily_steps, breaks=1000)
hist(steps_by_day$daily_steps, breaks=10)
print(paste("Median num steps per day: ", med(steps_by_day$daily_steps)))
print(paste("Median num steps per day: ", median(steps_by_day$daily_steps)))
print(paste("Mean num steps per day: ", mean(steps_by_day$daily_steps)))
View(activity_df)
sum(activity_df$steps[activity_df$date=="2012-10-03"])
print(paste("Mean num steps per day: ", round(mean(steps_by_day$daily_steps),0)))
